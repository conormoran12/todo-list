/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/todo.js":
/*!*********************!*\
  !*** ./src/todo.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _white_plus_box_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./white-plus-box.png */ \"./src/white-plus-box.png\");\n/* harmony import */ var _dark_blue_notebook_edit_outline_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dark-blue-notebook-edit-outline.png */ \"./src/dark-blue-notebook-edit-outline.png\");\n/* harmony import */ var _dark_blue_information_outline_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dark-blue-information-outline.png */ \"./src/dark-blue-information-outline.png\");\n/* harmony import */ var _dark_blue_trash_can_outline_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dark-blue-trash-can-outline.png */ \"./src/dark-blue-trash-can-outline.png\");\n/* harmony import */ var _white_check_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./white-check.png */ \"./src/white-check.png\");\n\r\n\r\n\r\n\r\n\r\n\r\nDate.prototype.getWeek = function () {\r\n  var onejan = new Date(this.getFullYear(), 0, 1);\r\n  var today = new Date(this.getFullYear(), this.getMonth(), this.getDate());\r\n  var dayOfYear = ((today - onejan + 86400000) / 86400000);\r\n  return Math.ceil(dayOfYear / 7)\r\n};\r\n\r\nconst ProjectManager = {\r\n  currentProject: undefined,\r\n  isInbox: true,\r\n}\r\n\r\nclass Project {\r\n  constructor(projectName, projectDescription) {\r\n    this.name = projectName;\r\n    this.description = projectDescription;\r\n    this.tasks = this.createTasksProxy({})\r\n\r\n  }\r\n\r\n\r\n\r\n  createTasksProxy(target) {\r\n    return new Proxy(target, {\r\n      set: (obj, prop, value) => {\r\n        if (!obj.hasOwnProperty(prop)) {\r\n          console.log(`New task added: ${prop}`);\r\n          if (this.name == ProjectManager.currentProject.name) {\r\n          }\r\n        }\r\n        obj[prop] = value;\r\n        if (!obj.hasOwnProperty(prop)) {\r\n          if (this.name == ProjectManager.currentProject.name) {\r\n            this.addTaskToDom(obj[prop]);\r\n          }\r\n\r\n        }\r\n        return true;\r\n      },\r\n      deleteProperty: (obj, prop) => {\r\n        if (obj.hasOwnProperty(prop)) {\r\n          console.log(`Task removed: ${prop}`);\r\n        }\r\n        delete obj[prop];\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  addTask(taskId, taskDetails, form) {\r\n    this.tasks[taskId] = taskDetails;\r\n    this.addTaskToDom(this.tasks[taskId], form);\r\n    //addTask.resetFields();\r\n    console.log(\"wdasdaw\");\r\n  }\r\n\r\n  addTaskToDom(taskObject, form) {\r\n    if (form) {\r\n      if (form.checkValidity() == false) {\r\n        if (addTask.nameField.value == \"\") {\r\n          addTask.nameField.classList.add(\"invalid\");\r\n        }\r\n        if (addTask.descriptionField.value == \"\") {\r\n          addTask.descriptionField.classList.add(\"invalid\");\r\n        }\r\n        if (addTask.dueDateField.value == \"\") {\r\n          addTask.dueDateField.classList.add(\"invalid\");\r\n        }\r\n        if (addTask.difficultyField.selectedIndex == 0) {\r\n          addTask.difficultyField.classList.add(\"invalid\");\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    console.log(taskObject)\r\n    const task_content = document.createElement(\"div\");\r\n\r\n    const left_side = document.createElement(\"div\");\r\n    const right_side = document.createElement(\"div\");\r\n\r\n    const check_mark = document.createElement(\"button\");\r\n    const task_name = document.createElement(\"div\");\r\n    const due_date = document.createElement(\"div\");\r\n\r\n    const option_container = document.createElement(\"div\");\r\n\r\n    const edit = document.createElement(\"button\");\r\n    const information = document.createElement(\"button\");\r\n    const del = document.createElement(\"button\");\r\n\r\n    task_name.textContent = taskObject.name.toUpperCase();\r\n    due_date.textContent = taskObject.dueDate;\r\n\r\n    task_content.classList.add(\"task\");\r\n\r\n    left_side.classList.add(\"left-side\");\r\n    right_side.classList.add(\"right-side\");\r\n\r\n    check_mark.classList.add(\"checkMark\", taskObject.difficulty);\r\n    task_name.classList.add(\"name\");\r\n    due_date.classList.add(\"due-date\");\r\n\r\n    option_container.classList.add(\"option-container\");\r\n\r\n    edit.id = \"task_option_1\";\r\n    information.id = \"task_option_2\";\r\n    del.id = \"task_option_3\";\r\n\r\n    if (taskObject.complete == true) {\r\n      check_mark.classList.add(`${taskObject.difficulty}-complete`);\r\n      addImage(check_mark, _white_check_png__WEBPACK_IMPORTED_MODULE_4__, \"\");\r\n    }\r\n\r\n    addImage(edit, _dark_blue_notebook_edit_outline_png__WEBPACK_IMPORTED_MODULE_1__, \"\");\r\n    addImage(information, _dark_blue_information_outline_png__WEBPACK_IMPORTED_MODULE_2__, \"\");\r\n    addImage(del, _dark_blue_trash_can_outline_png__WEBPACK_IMPORTED_MODULE_3__, \"\");\r\n\r\n    document.getElementById(\"project_tasks_area\").appendChild(task_content);\r\n    task_content.appendChild(left_side);\r\n    task_content.appendChild(right_side);\r\n\r\n    left_side.appendChild(check_mark);\r\n    left_side.appendChild(task_name);\r\n    right_side.appendChild(due_date);\r\n    right_side.appendChild(option_container);\r\n\r\n    option_container.appendChild(edit);\r\n    option_container.appendChild(information);\r\n    option_container.appendChild(del);\r\n\r\n    check_mark.addEventListener(\"mouseup\", () => {\r\n      console.log(\"clicked\");\r\n      if (taskObject.complete == true) {\r\n        taskObject.complete = false;\r\n        check_mark.replaceChildren();\r\n        if (check_mark.classList.contains(`${taskObject.difficulty}-complete`)) {\r\n          check_mark.classList.remove(`${taskObject.difficulty}-complete`);\r\n        }\r\n      } else {\r\n        taskObject.complete = true;\r\n\r\n        check_mark.classList.add(`${taskObject.difficulty}-complete`);\r\n        addImage(check_mark, _white_check_png__WEBPACK_IMPORTED_MODULE_4__, \"\");\r\n      }\r\n    })\r\n\r\n\r\n    del.addEventListener(\"mouseup\", () => {\r\n      task_content.remove();\r\n      this.removeTask(taskObject.name);\r\n    })\r\n\r\n    information.addEventListener(\"mouseup\", () => {\r\n      infoTask.modal.open = true;\r\n\r\n      infoTask.nameField.value = taskObject.name;\r\n      infoTask.descriptionField.value = taskObject.description;\r\n\r\n      infoTask.dueDateField.value = taskObject.dueDate;\r\n      // //     // const dt = new Date(projects[ProjectManager.currentProject].tasks[name].dueDate);\r\n      // //     // const day = (\"0\" + dt.getDate()).slice(-2);\r\n      // //     // const month = (\"0\" + (dt.getMonth() + 1)).slice(-2);\r\n      // //     // const date = dt.getFullYear() + \"-\" + month + \"-\" + day;\r\n      // //     // infoTask.dueDateField.value = date\r\n\r\n      infoTask.difficultyField.value = toTitleCase(taskObject.difficulty);\r\n    })\r\n\r\n    edit.addEventListener(\"mouseup\", () => {\r\n      editTask.modal.open = true;\r\n\r\n      editTask.resetFields();\r\n      //console.log(`Current Project on Edit button: ${ProjectTemplates.currentProject.name}`);\r\n\r\n      editTask.nameField.value = taskObject.name;\r\n      console.log(`Description: ${taskObject.description}`);\r\n      editTask.descriptionField.value = taskObject.description;\r\n\r\n      editTask.dueDateField.value = taskObject.dueDate;\r\n      editTask.difficultyField.value = taskObject.difficulty;\r\n\r\n      console.log(\"Added all \");\r\n    })\r\n\r\n\r\n\r\n\r\n    editTask.saveButton.addEventListener(\"mouseup\", () => {\r\n\r\n      if (editTask.form) {\r\n        console.log(\"occurreddsdad\");\r\n        if (editTask.form.checkValidity() == false) {\r\n          if (editTask.nameField.value == \"\") {\r\n            editTask.nameField.classList.add(\"invalid\");\r\n          }\r\n          if (editTask.descriptionField.value == \"\") {\r\n            editTask.descriptionField.classList.add(\"invalid\");\r\n          }\r\n          if (editTask.dueDateField.value == \"\") {\r\n            editTask.dueDateField.classList.add(\"invalid\");\r\n          }\r\n          if (editTask.difficultyField.selectedIndex == 0) {\r\n            editTask.difficultyField.classList.add(\"invalid\");\r\n          }\r\n          return;\r\n        }\r\n      }\r\n\r\n      editTask.modal.open = false;\r\n\r\n      //console.log(project.tasks[taskObject]);\r\n\r\n      console.log(`Name Field: ${editTask.nameField.value}`);\r\n      console.log(`Description Field: ${editTask.descriptionField.value}`);\r\n      console.log(`Due Date Field: ${editTask.dueDateField.value}`);\r\n      console.log(`Difficulty Field: ${editTask.difficultyField.value}`);\r\n\r\n      for (let i = 0; i < Object.entries(this.tasks).length; i++) {\r\n        console.log(\"Entries\");\r\n        console.log(Object.entries(this.tasks));\r\n        console.log(Object.entries(this.tasks)[i]);\r\n        console.log(Object.entries(this.tasks)[i]);\r\n        console.log(Object.entries(this.tasks)[i][0]);\r\n\r\n        if (this.tasks[Object.entries(this.tasks)[i][0]] == taskObject) {\r\n          console.log(\"same\");\r\n          //console.log(console.log(Object.keys(this.tasks)[i][0][0]));\r\n          this.editTask(Object.entries(this.tasks)[i][0], { name: editTask.nameField.value, description: editTask.descriptionField.value, dueDate: editTask.dueDateField.value, difficulty: editTask.difficultyField.value, complete: false })\r\n        }\r\n      }\r\n\r\n      //this.editTask(Object.keys(this.tasks), { name: editTask.nameField.value, description: editTask.descriptionField.value, dueDate: editTask.dueDateField.value, difficulty: editTask.difficultyField.value })\r\n\r\n      // project.tasks[taskObj].name = editTask.nameField.value;\r\n      // project.tasks[taskObj].description = editTask.descriptionField.value;\r\n      // project.tasks[taskObj].dueDate = editTask.dueDateField.value;\r\n      // project.tasks[taskObj].difficulty = editTask.difficultyField.value;\r\n\r\n      // console.log(`Saved Task ${taskObj} in ${project.name}`);\r\n\r\n      // task_name.textContent = taskObj.name.toUpperCase();\r\n      // due_date.textContent = project.tasks[taskObj].dueDate;\r\n\r\n\r\n      // if (!check_mark.classList.contains(project.tasks[taskObj].difficulty)) {\r\n      //   if (check_mark.classList.contains(\"easy\")) {\r\n      //     check_mark.classList.remove(\"easy\");\r\n      //     check_mark.classList.remove(\"easy-complete\");\r\n      //   } else if (check_mark.classList.contains(\"medium\")) {\r\n      //     check_mark.classList.remove(\"medium\");\r\n      //     check_mark.classList.remove(\"medium-complete\");\r\n      //   } else if (check_mark.classList.contains(\"hard\")) {\r\n      //     check_mark.classList.remove(\"hard\");\r\n      //     check_mark.classList.remove(\"hard-complete\");\r\n      //   }\r\n\r\n      //   check_mark.classList.add(project.tasks[taskObj].difficulty);\r\n      //   check_mark.classList.add(projects[ProjectManager.currentProject].tasks[name].difficulty);\r\n      //   if (project.tasks[taskObj].complete == true) {\r\n      //     check_mark.classList.add(`${project.tasks[taskObj].difficulty}-complete`);\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    })\r\n    addTask.resetFields();\r\n    addTask.modal.open = false;\r\n  }\r\n\r\n\r\n\r\n\r\n  editTaskInDom(taskObj, updatedDetails) {\r\n    for (let i = 0; i < document.getElementById(\"project_tasks_area\").children.length; i++) {\r\n      //console.log(document.getElementById(\"project_tasks_area\").children[i][0]);\r\n      if (document.getElementById(\"project_tasks_area\").children[i]) {\r\n        const projectTasksArea = document.getElementById(\"project_tasks_area\");\r\n        const taskContainer = document.getElementById(\"project_tasks_area\").children[i];\r\n        const leftSideElement = taskContainer.querySelector('.left-side');\r\n        const rightSideElement = taskContainer.querySelector('.right-side');\r\n        console.log(\"hi\");\r\n        const checkmarkElement = leftSideElement.querySelector('.checkMark');\r\n        const nameElement = leftSideElement.querySelector('.name');\r\n        const dueDateElement = rightSideElement.querySelector(\".due-date\");\r\n        if (nameElement.textContent.toLowerCase() == taskObj.name.toLowerCase()) {\r\n          Object.assign(taskObj, updatedDetails);\r\n          nameElement.textContent = taskObj.name.toUpperCase();\r\n          dueDateElement.textContent = taskObj.dueDate;\r\n          console.log(\"yo\");\r\n\r\n          checkmarkElement.replaceChildren();\r\n          if (!checkmarkElement.classList.contains(taskObj.difficulty)) {\r\n            if (checkmarkElement.classList.contains(\"easy\")) {\r\n              checkmarkElement.classList.remove(\"easy\");\r\n              checkmarkElement.classList.remove(\"easy-complete\");\r\n            } else if (checkmarkElement.classList.contains(\"medium\")) {\r\n              checkmarkElement.classList.remove(\"medium\");\r\n              checkmarkElement.classList.remove(\"medium-complete\");\r\n            } else if (checkmarkElement.classList.contains(\"hard\")) {\r\n              checkmarkElement.classList.remove(\"hard\");\r\n              checkmarkElement.classList.remove(\"hard-complete\");\r\n            }\r\n\r\n            checkmarkElement.classList.add(taskObj.difficulty);\r\n            checkmarkElement.classList.add(taskObj.difficulty);\r\n            if (taskObj.complete == true) {\r\n              checkmarkElement.classList.add(`${taskObj.difficulty}-complete`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n      //document.getElementById(\"project_tasks_area\").children[i].getElementsByClassName(\"left-side\")[0].getElementsByClassName(\"name\")[0].textContent = taskObj.name;\r\n      //document.getElementById(\"project_tasks_area\").children[i].getElementsByClassName(\"right-side\")[0].getElementsByClassName(\"dueDate\")[0].textContent = taskObj.dueDate;\r\n    }\r\n  }\r\n\r\n  editTask(taskId, updatedDetails) {\r\n    if (this.tasks[taskId]) {\r\n      const task = this.tasks[taskId];\r\n      const oldName = task.name;\r\n      console.log(\"done\");\r\n      //Object.assign(task, updatedDetails);\r\n      this.editTaskInDom(task, updatedDetails);\r\n      //Object.assign(task, updatedDetails);\r\n      console.log(`Task ${taskId} updated:`, task);\r\n    } else {\r\n      console.error(`Task ${taskId} does not exist.`);\r\n    }\r\n  }\r\n\r\n  findTasks() {\r\n    document.getElementById(\"project_tasks_area\").replaceChildren();\r\n    console.log(\"loading\");\r\n    for (let i = 0; i < Object.entries(this.tasks).length; i++) {\r\n      console.log(\"task\");\r\n      this.addTaskToDom(this.tasks[Object.entries(this.tasks)[i][0]]);\r\n    }\r\n  }\r\n\r\n  removeTask(taskId) {\r\n    delete this.tasks[taskId];\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction globalAddTaskToDom(taskObject) {\r\n  console.log(taskObject)\r\n  const task_content = document.createElement(\"div\");\r\n\r\n  const left_side = document.createElement(\"div\");\r\n  const right_side = document.createElement(\"div\");\r\n\r\n  const check_mark = document.createElement(\"button\");\r\n  const task_name = document.createElement(\"div\");\r\n  const due_date = document.createElement(\"div\");\r\n\r\n  const option_container = document.createElement(\"div\");\r\n\r\n  const edit = document.createElement(\"button\");\r\n  const information = document.createElement(\"button\");\r\n  const del = document.createElement(\"button\");\r\n\r\n  task_name.textContent = taskObject.name.toUpperCase();\r\n  due_date.textContent = taskObject.dueDate;\r\n\r\n  task_content.classList.add(\"task\");\r\n\r\n  left_side.classList.add(\"left-side\");\r\n  right_side.classList.add(\"right-side\");\r\n\r\n  check_mark.classList.add(\"checkMark\", taskObject.difficulty);\r\n  task_name.classList.add(\"name\");\r\n  due_date.classList.add(\"due-date\");\r\n\r\n  option_container.classList.add(\"option-container\");\r\n\r\n  edit.id = \"task_option_1\";\r\n  information.id = \"task_option_2\";\r\n  del.id = \"task_option_3\";\r\n\r\n  if (taskObject.complete == true) {\r\n    check_mark.classList.add(`${taskObject.difficulty}-complete`);\r\n    addImage(check_mark, _white_check_png__WEBPACK_IMPORTED_MODULE_4__, \"\");\r\n  }\r\n\r\n  addImage(edit, _dark_blue_notebook_edit_outline_png__WEBPACK_IMPORTED_MODULE_1__, \"\");\r\n  addImage(information, _dark_blue_information_outline_png__WEBPACK_IMPORTED_MODULE_2__, \"\");\r\n  addImage(del, _dark_blue_trash_can_outline_png__WEBPACK_IMPORTED_MODULE_3__, \"\");\r\n\r\n  document.getElementById(\"project_tasks_area\").appendChild(task_content);\r\n  task_content.appendChild(left_side);\r\n  task_content.appendChild(right_side);\r\n\r\n  left_side.appendChild(check_mark);\r\n  left_side.appendChild(task_name);\r\n  right_side.appendChild(due_date);\r\n  right_side.appendChild(option_container);\r\n\r\n  //option_container.appendChild(edit);\r\n  option_container.appendChild(information);\r\n  // option_container.appendChild(del);\r\n\r\n  check_mark.addEventListener(\"mouseup\", () => {\r\n    console.log(\"clicked\");\r\n    if (taskObject.complete == true) {\r\n      taskObject.complete = false;\r\n      check_mark.replaceChildren();\r\n      if (check_mark.classList.contains(`${taskObject.difficulty}-complete`)) {\r\n        check_mark.classList.remove(`${taskObject.difficulty}-complete`);\r\n      }\r\n    } else {\r\n      taskObject.complete = true;\r\n\r\n      check_mark.classList.add(`${taskObject.difficulty}-complete`);\r\n      addImage(check_mark, _white_check_png__WEBPACK_IMPORTED_MODULE_4__, \"\");\r\n    }\r\n  })\r\n\r\n\r\n  del.addEventListener(\"mouseup\", () => {\r\n    task_content.remove();\r\n    ProjectManager.removeTask(taskObject.name);\r\n  })\r\n\r\n  information.addEventListener(\"mouseup\", () => {\r\n    infoTask.modal.open = true;\r\n\r\n    infoTask.nameField.value = taskObject.name;\r\n    infoTask.descriptionField.value = taskObject.description;\r\n\r\n    infoTask.dueDateField.value = taskObject.dueDate;\r\n    // //     // const dt = new Date(projects[ProjectManager.currentProject].tasks[name].dueDate);\r\n    // //     // const day = (\"0\" + dt.getDate()).slice(-2);\r\n    // //     // const month = (\"0\" + (dt.getMonth() + 1)).slice(-2);\r\n    // //     // const date = dt.getFullYear() + \"-\" + month + \"-\" + day;\r\n    // //     // infoTask.dueDateField.value = date\r\n\r\n    infoTask.difficultyField.value = toTitleCase(taskObject.difficulty);\r\n  })\r\n\r\n  edit.addEventListener(\"mouseup\", () => {\r\n    editTask.modal.open = true;\r\n\r\n    editTask.resetFields();\r\n    //console.log(`Current Project on Edit button: ${ProjectTemplates.currentProject.name}`);\r\n\r\n    editTask.nameField.value = taskObject.name;\r\n    console.log(`Description: ${taskObject.description}`);\r\n    editTask.descriptionField.value = taskObject.description;\r\n\r\n    editTask.dueDateField.value = taskObject.dueDate;\r\n    editTask.difficultyField.value = taskObject.difficulty;\r\n\r\n    console.log(\"Added all \");\r\n  }, { once: true })\r\n}\r\n\r\nfunction toTitleCase(str) {\r\n  return str.replace(\r\n    /\\w\\S*/g,\r\n    text => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()\r\n  );\r\n}\r\n\r\nfunction renameKey(obj, oldKey, newKey) {\r\n  if (oldKey !== newKey) {\r\n    Object.defineProperty(obj, newKey, Object.getOwnPropertyDescriptor(obj, oldKey));\r\n    delete obj[oldKey];\r\n  }\r\n}\r\n\r\n\r\nfunction addImage(element, image, className) {\r\n  const newImage = new Image();\r\n  newImage.src = image;\r\n  if (className != \"\") {\r\n    newImage.classList.add(className);\r\n  }\r\n  element.appendChild(newImage);\r\n}\r\n\r\nconst ProjectTemplates = {\r\n\r\n  sideBarTemplate: function (name, description, project) {\r\n    const sidebar = document.getElementById(\"project_tab_container\");\r\n\r\n    const projectTab = document.createElement(\"button\");\r\n    projectTab.textContent = name;\r\n    projectTab.id = \"project_tab\";\r\n\r\n    projectTab.addEventListener(\"mouseup\", (e) => {\r\n      if (ProjectManager.currentProject != project) {\r\n        console.log(project.name);\r\n        ProjectManager.currentProject = project;\r\n        this.projectTaskContainer.add(name, description);\r\n        ProjectManager.currentProject.findTasks();\r\n        console.log(\"found tasks\");\r\n      }\r\n    })\r\n\r\n    sidebar.appendChild(projectTab);\r\n  },\r\n  projectTaskContainer: {\r\n    header: function (name, description) {\r\n      const project_task_header_container = document.createElement(\"div\");\r\n\r\n      const title = document.createElement(\"div\");\r\n      const divider = document.createElement(\"div\");\r\n      const desc = document.createElement(\"div\");\r\n\r\n      title.textContent = name.toUpperCase();\r\n      desc.textContent = description;\r\n\r\n      project_task_header_container.classList.add(\"project-task-header-container\");\r\n\r\n\r\n\r\n      title.classList.add(\"title\");\r\n      divider.classList.add(\"divider\");\r\n      desc.classList.add(\"description\");\r\n\r\n      document.getElementsByClassName(\"project-task-container\")[0].insertBefore(project_task_header_container, document.getElementsByClassName(\"project-task-container\")[0].firstChild);\r\n\r\n      project_task_header_container.appendChild(title);\r\n      project_task_header_container.appendChild(divider);\r\n      project_task_header_container.appendChild(desc);\r\n    },\r\n    button: function () {\r\n      const button_container = document.createElement(\"div\");\r\n      const button = document.createElement(\"button\");\r\n      const button_text = document.createElement(\"div\");\r\n      const divider = document.createElement(\"div\");\r\n\r\n      button_text.textContent = \"Add Task\";\r\n\r\n      button.id = \"add_task_button\";\r\n      button_container.classList.add(\"add-task-button-container\");\r\n      button.classList.add(\"task-button\", \"add-task\");\r\n      button_text.classList.add(\"add-task-text\", \"task-button-name\");\r\n      divider.classList.add(\"divider\");\r\n\r\n      document.getElementsByClassName(\"project-task-container\")[0].insertBefore(button_container, document.getElementsByClassName(\"project-task-container\")[0].children[1]);\r\n\r\n      button.addEventListener(\"mouseup\", (e) => {\r\n        addTask.modal.open = true;\r\n      })\r\n\r\n      button_container.appendChild(button);\r\n      button_container.appendChild(divider);\r\n\r\n      button.appendChild(button_text);\r\n\r\n      addImage(button, _white_plus_box_png__WEBPACK_IMPORTED_MODULE_0__, \"add-project\");\r\n    },\r\n    taskContainer: function () {\r\n      const task_container = document.createElement(\"div\");\r\n\r\n      task_container.classList.add(\"project-tasks-area\");\r\n      task_container.id = \"project_tasks_area\";\r\n\r\n      document.getElementsByClassName(\"project-task-container\")[0].appendChild(task_container);\r\n\r\n      //this.findTasks(ProjectManager.currentProject);\r\n    },\r\n\r\n    add: function (name, description, dueDate, difficulty) {\r\n      this.clear();\r\n      this.header(name, description);\r\n      this.button();\r\n      //this.taskContainer();\r\n    },\r\n    clear: function () {\r\n      document.getElementsByClassName(\"project-task-container\")[0].replaceChildren(document.getElementById(\"project_tasks_area\"));\r\n    },\r\n    findTasks: function (project) {\r\n\r\n      console.log(project);\r\n\r\n      document.getElementById(\"project_tasks_area\").replaceChildren();\r\n      for (let i = 0; i < Object.keys(project.tasks).length; i++) {\r\n        console.log(\"iteration\");\r\n\r\n        const entries = Object.entries(project.tasks);\r\n\r\n        const task = Object.entries(entries[i][1]);\r\n\r\n        const name = task[0][1];\r\n        const dueDate = task[2][1];\r\n        const difficulty = task[3][1];\r\n        const complete = task[4][1];\r\n\r\n        console.log(name);\r\n        console.log(dueDate);\r\n        console.log(difficulty);\r\n        console.log(complete)\r\n\r\n        console.log(project.tasks[Object.keys(project.tasks)[i]]);\r\n\r\n        let taskObj = Object.keys(project.tasks)[i];\r\n\r\n        console.log(taskObj);\r\n\r\n        this.task(name, dueDate, difficulty, complete, project, taskObj);\r\n      }\r\n    },\r\n  },\r\n}\r\n\r\nconst infoTask = {\r\n  closeButton: document.getElementById(\"info_task_close_button\"),\r\n  modal: document.getElementById(\"info_task_modal\"),\r\n\r\n  nameField: document.getElementById(\"info_task_name\"),\r\n  descriptionField: document.getElementById(\"info_task_description\"),\r\n  dueDateField: document.getElementById(\"info_task_due_date\"),\r\n  difficultyField: document.getElementById(\"info_task_difficulty\"),\r\n  resetFields: function () {\r\n    this.nameField.value = \"\";\r\n    this.descriptionField.value = \"\";\r\n    this.dueDateField.value = \"\";\r\n    this.difficultyField.value = \"\";\r\n  }\r\n}\r\n\r\nconst editTask = {\r\n  closeButton: document.getElementById(\"edit_task_close_button\"),\r\n  saveButton: document.getElementById(\"edit_task_button_save\"),\r\n  modal: document.getElementById(\"edit_task_modal\"),\r\n  form: document.getElementById(\"edit_task_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0],\r\n  nameField: document.getElementById(\"edit_task_name\"),\r\n  descriptionField: document.getElementById(\"edit_task_description\"),\r\n  dueDateField: document.getElementById(\"edit_task_due_date\"),\r\n  difficultyField: document.getElementById(\"edit_task_difficulty\"),\r\n  resetFields: function () {\r\n    console.log(\"reseted fields\");\r\n    this.nameField.value = \"\";\r\n    this.descriptionField.value = \"\";\r\n    this.dueDateField.value = \"\";\r\n    this.difficultyField.value = \"\";\r\n  }\r\n}\r\n\r\nconst addTask = {\r\n  promptButton: document.getElementById(\"add_task_button\"),\r\n  closeButton: document.getElementById(\"add_task_close_button\"),\r\n  addButton: document.getElementById(\"add_task_button_save\"),\r\n  modal: document.getElementById(\"add_task_modal\"),\r\n  form: document.getElementById(\"add_task_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0],\r\n  nameField: document.getElementById(\"add_task_name\"),\r\n  descriptionField: document.getElementById(\"add_task_description\"),\r\n  dueDateField: document.getElementById(\"add_task_due_date\"),\r\n  difficultyField: document.getElementById(\"add_task_difficulty\"),\r\n  resetFields: function () {\r\n    this.nameField.value = \"\";\r\n    this.descriptionField.value = \"\";\r\n    this.dueDateField.value = \"\";\r\n    this.difficultyField.selectedIndex = 0;\r\n  }\r\n}\r\n\r\nconst addProject = {\r\n  promptButton: document.getElementById(\"add_project_button\"),\r\n  closeButton: document.getElementById(\"add_project_close_button\"),\r\n  addButton: document.getElementById(\"add_project_button_save\"),\r\n  modal: document.getElementById(\"add_project_modal\"),\r\n  form: document.getElementById(\"add_project_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0],\r\n  nameField: document.getElementById(\"add_project_name\"),\r\n  descriptionField: document.getElementById(\"add_project_description\"),\r\n  resetFields: function () {\r\n    this.nameField.value = \"\";\r\n    this.descriptionField.value = \"\";\r\n  }\r\n}\r\n\r\nconst projects = {};\r\n\r\naddProject.promptButton.addEventListener(\"mouseup\", (e) => {\r\n  addProject.modal.open = true;\r\n})\r\n\r\naddProject.closeButton.addEventListener(\"mouseup\", (e) => {\r\n  addProject.modal.open = false;\r\n})\r\n\r\naddProject.addButton.addEventListener(\"mouseup\", (e) => {\r\n  if (addProject.form) {\r\n    if (addProject.form.checkValidity() == false) {\r\n      if (addTask.nameField.value == \"\") {\r\n        addTask.nameField.classList.add(\"invalid\");\r\n      }\r\n      if (addTask.descriptionField.value == \"\") {\r\n        addTask.descriptionField.classList.add(\"invalid\");\r\n      }\r\n      if (addTask.dueDateField.value == \"\") {\r\n        addTask.dueDateField.classList.add(\"invalid\");\r\n      }\r\n      if (addTask.difficultyField.selectedIndex == 0) {\r\n        addTask.difficultyField.classList.add(\"invalid\");\r\n      }\r\n      return;\r\n    }\r\n  }\r\n  const project = new Project(addProject.nameField.value, addProject.descriptionField.value);\r\n\r\n  const projectName = project.name;\r\n\r\n  projects[project.name] = project;\r\n\r\n  ProjectTemplates.sideBarTemplate(project.name, project.description, project);\r\n  ProjectTemplates.projectTaskContainer.findTasks(project);\r\n  ProjectManager.currentProject = project;\r\n  ProjectTemplates.projectTaskContainer.add(project.name, project.description);\r\n  addProject.modal.open = false;\r\n\r\n  addProject.resetFields();\r\n})\r\n\r\naddTask.closeButton.addEventListener(\"mouseup\", (e) => {\r\n  addTask.modal.open = false;\r\n  addTask.resetFields();\r\n})\r\n\r\naddTask.addButton.addEventListener(\"mouseup\", (e) => {\r\n  //ProjectManager.currentProject.tasks[addTask.nameField.value] = { name: addTask.nameField.value, description: addTask.descriptionField.value, dueDate: addTask.dueDateField.value, difficulty: addTask.difficultyField.value, complete: false };\r\n\r\n  //const newTask = new TaskTemplates(ProjectManager.currentProject, ProjectManager.currentProject.tasks[addTask.nameField.value]);\r\n\r\n  ProjectManager.currentProject.addTask(addTask.nameField.value, { name: addTask.nameField.value, description: addTask.descriptionField.value, dueDate: addTask.dueDateField.value, difficulty: addTask.difficultyField.value, complete: false }, document.getElementById(\"add_task_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0])\r\n  //ProjectTemplates.projectTaskContainer.task(addTask.nameField.value, addTask.dueDateField.value, addTask.difficultyField.value, false, ProjectManager.currentProject, addTask.nameField.value);\r\n\r\n  console.log(addTask.form);\r\n  //addTask.resetFields();\r\n})\r\n\r\ninfoTask.closeButton.addEventListener(\"mouseup\", (e) => {\r\n  infoTask.modal.open = false;\r\n  infoTask.resetFields();\r\n})\r\n\r\neditTask.closeButton.addEventListener(\"mouseup\", (e) => {\r\n  editTask.modal.open = false;\r\n  editTask.resetFields();\r\n})\r\n\r\ndocument.getElementById(\"inbox\").addEventListener(\"mouseup\", () => {\r\n  ProjectManager.currentProject = \"\";\r\n  const AllTasks = [];\r\n  const projectKeys = Object.keys(projects);\r\n\r\n\r\n\r\n  document.getElementById(\"project_tasks_area\").replaceChildren();\r\n  ProjectTemplates.projectTaskContainer.clear();\r\n  ProjectTemplates.projectTaskContainer.header(\"Inbox\", \"\");\r\n\r\n  for (let i = 0; i < projectKeys.length; i++) {\r\n    const taskEntries = Object.entries(projects[projectKeys[i]].tasks);\r\n    //AllTasks.push(taskEntries);\r\n    for (let j = 0; j < taskEntries.length; j++) {\r\n      AllTasks.push(taskEntries[j]);\r\n    }\r\n    //console.log(taskEntries[0][1][\"dueDate\"]);\r\n  }\r\n\r\n\r\n  AllTasks.sort(function (a, b) {\r\n    // Turn your strings into dates, and then subtract them\r\n    // to get a value that is either negative, positive, or zero.\r\n    return new Date(b[1][\"dueDate\"]).getTime() - new Date(a[1][\"dueDate\"]).getTime();\r\n  });\r\n  //AllTasks.filter((task) = task[0][1][\"dueDate\"])\r\n  console.log(AllTasks);\r\n\r\n\r\n  for (let i = 0; i < Object.entries(AllTasks).length; i++) {\r\n    console.log(Object.entries(AllTasks)[i]);\r\n    //console.log(Object.entries(AllTasks)[i][1][0]);\r\n    console.log(\"ran\");\r\n    for (let j = 0; j < projectKeys.length; j++) {\r\n      const taskEntries = Object.entries(projects[projectKeys[i]].tasks);\r\n      console.log(\"ran again\");\r\n      if (projects[projectKeys[j]].tasks[Object.entries(AllTasks)[i][1][0]]) {\r\n        console.log(\"equals\");\r\n        globalAddTaskToDom(projects[projectKeys[j]].tasks[Object.entries(AllTasks)[i][1][0]]);\r\n      }\r\n      //AllTasks.push(taskEntries);\r\n      //console.log(taskEntries[0][1][\"dueDate\"]);\r\n    }\r\n  }\r\n})\r\n\r\ndocument.getElementById(\"this_week\").addEventListener(\"mouseup\", () => {\r\n  ProjectManager.currentProject = \"\";\r\n  const AllTasks = [];\r\n  const projectKeys = Object.keys(projects);\r\n\r\n\r\n  document.getElementById(\"project_tasks_area\").replaceChildren();\r\n  ProjectTemplates.projectTaskContainer.clear();\r\n  ProjectTemplates.projectTaskContainer.header(\"This Week\", \"\");\r\n\r\n  for (let i = 0; i < projectKeys.length; i++) {\r\n    console.log(projects[projectKeys[i]]);\r\n    const taskEntries = Object.entries(projects[projectKeys[i]].tasks);\r\n    //AllTasks.push(taskEntries);\r\n    for (let j = 0; j < taskEntries.length; j++) {\r\n      AllTasks.push(taskEntries[j]);\r\n    }\r\n    //console.log(taskEntries[0][1][\"dueDate\"]);\r\n  }\r\n\r\n\r\n  // AllTasks.sort(function (a, b) {\r\n  //   // Turn your strings into dates, and then subtract them\r\n  //   // to get a value that is either negative, positive, or zero.\r\n  //   return new Date(b[1][\"dueDate\"]).getTime() - new Date(a[1][\"dueDate\"]).getTime();\r\n  // });\r\n  //console.log(AllTasks[0][1][\"dueDate\"])\r\n  const filteredTasks = AllTasks.filter((task) => new Date(task[1][\"dueDate\"]).getWeek() === new Date().getWeek())\r\n  console.log(filteredTasks);\r\n\r\n\r\n  for (let i = 0; i < Object.entries(filteredTasks).length; i++) {\r\n    console.log(Object.entries(filteredTasks)[i]);\r\n    //console.log(Object.entries(AllTasks)[i][1][0]);\r\n    console.log(\"ran\");\r\n    for (let j = 0; j < projectKeys.length; j++) {\r\n      const taskEntries = Object.entries(projects[projectKeys[j]].tasks);\r\n      console.log(\"ran again\");\r\n      if (projects[projectKeys[j]].tasks[Object.entries(filteredTasks)[i][1][0]]) {\r\n        console.log(\"equals\");\r\n        globalAddTaskToDom(projects[projectKeys[j]].tasks[Object.entries(filteredTasks)[i][1][0]]);\r\n      }\r\n      //AllTasks.push(taskEntries);\r\n      //console.log(taskEntries[0][1][\"dueDate\"]);\r\n    }\r\n  }\r\n})\r\n\r\ndocument.getElementById(\"today\").addEventListener(\"mouseup\", () => {\r\n  ProjectManager.currentProject = \"\";\r\n  const AllTasks = [];\r\n  const projectKeys = Object.keys(projects);\r\n\r\n\r\n  document.getElementById(\"project_tasks_area\").replaceChildren();\r\n  ProjectTemplates.projectTaskContainer.clear();\r\n  ProjectTemplates.projectTaskContainer.header(\"Today\", \"\");\r\n\r\n  for (let i = 0; i < projectKeys.length; i++) {\r\n    const taskEntries = Object.entries(projects[projectKeys[i]].tasks);\r\n    //AllTasks.push(taskEntries);\r\n    for (let j = 0; j < taskEntries.length; j++) {\r\n      AllTasks.push(taskEntries[j]);\r\n    }\r\n    //console.log(taskEntries[0][1][\"dueDate\"]);\r\n  }\r\n\r\n\r\n  // AllTasks.sort(function (a, b) {\r\n  //   // Turn your strings into dates, and then subtract them\r\n  //   // to get a value that is either negative, positive, or zero.\r\n  //   return new Date(b[1][\"dueDate\"]).getTime() - new Date(a[1][\"dueDate\"]).getTime();\r\n  // });\r\n  //console.log(AllTasks[0][1][\"dueDate\"])\r\n  const filteredTasks = AllTasks.filter((task) => new Date(task[1][\"dueDate\"]).toDateString() === new Date().toDateString())\r\n  console.log(filteredTasks);\r\n\r\n\r\n  for (let i = 0; i < Object.entries(filteredTasks).length; i++) {\r\n    console.log(Object.entries(filteredTasks)[i]);\r\n    //console.log(Object.entries(AllTasks)[i][1][0]);\r\n    console.log(\"ran\");\r\n    for (let j = 0; j < projectKeys.length; j++) {\r\n      const taskEntries = Object.entries(projects[projectKeys[i]].tasks);\r\n      console.log(\"ran again\");\r\n      if (projects[projectKeys[j]].tasks[Object.entries(filteredTasks)[i][1][0]]) {\r\n        console.log(\"equals\");\r\n        globalAddTaskToDom(projects[projectKeys[j]].tasks[Object.entries(filteredTasks)[i][1][0]]);\r\n      }\r\n      //AllTasks.push(taskEntries);\r\n      //console.log(taskEntries[0][1][\"dueDate\"]);\r\n    }\r\n  }\r\n})\r\n\r\nconst add_task_form = document.getElementById(\"add_task_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0];\r\nconst edit_task_form = document.getElementById(\"edit_task_modal\").getElementsByClassName(\"modal-container\")[0].getElementsByTagName(\"form\")[0];\r\nconsole.log(add_task_form)\r\nfunction submitForm(event) {\r\n\r\n  //Preventing page refresh\r\n  event.preventDefault();\r\n  //event.stopPropagation();\r\n}\r\n\r\n//Calling a function during form submission.\r\nadd_task_form.addEventListener('submit', submitForm);\r\nedit_task_form.addEventListener('submit', submitForm);\r\n\r\n\n\n//# sourceURL=webpack://webpack-demo/./src/todo.js?");

/***/ }),

/***/ "./src/dark-blue-information-outline.png":
/*!***********************************************!*\
  !*** ./src/dark-blue-information-outline.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"a4066b67bb9a1dd086cf.png\";\n\n//# sourceURL=webpack://webpack-demo/./src/dark-blue-information-outline.png?");

/***/ }),

/***/ "./src/dark-blue-notebook-edit-outline.png":
/*!*************************************************!*\
  !*** ./src/dark-blue-notebook-edit-outline.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"303ed99b68c595bb2b75.png\";\n\n//# sourceURL=webpack://webpack-demo/./src/dark-blue-notebook-edit-outline.png?");

/***/ }),

/***/ "./src/dark-blue-trash-can-outline.png":
/*!*********************************************!*\
  !*** ./src/dark-blue-trash-can-outline.png ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"e7298ee4c98a175db2ca.png\";\n\n//# sourceURL=webpack://webpack-demo/./src/dark-blue-trash-can-outline.png?");

/***/ }),

/***/ "./src/white-check.png":
/*!*****************************!*\
  !*** ./src/white-check.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"2c587fc2aa4ea1f89852.png\";\n\n//# sourceURL=webpack://webpack-demo/./src/white-check.png?");

/***/ }),

/***/ "./src/white-plus-box.png":
/*!********************************!*\
  !*** ./src/white-plus-box.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"32b0e1a57e50476572d2.png\";\n\n//# sourceURL=webpack://webpack-demo/./src/white-plus-box.png?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/todo.js");
/******/ 	
/******/ })()
;